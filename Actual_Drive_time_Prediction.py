# ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ ‡∏Ç‡∏±‡∏ö‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡πÑ‡∏ü‡∏ü‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏Å‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
# ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ library ‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ visualization ‡πÅ‡∏•‡∏∞ machine learning ‡πÄ‡∏ä‡πà‡∏ô pandas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, sklearn ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÅ‡∏•‡∏∞ seaborn, matplotlib ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from xgboost import XGBRegressor
from sklearn.model_selection import LeaveOneOut
import numpy as np

#‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤
file_path = "/content/drive/MyDrive/ev_journeys 2.csv"
df = pd.read_csv(file_path)

#‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Data Frame & ‡∏ï‡∏ß‡∏£‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df.head()
df.shape

#‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
rows_before = len(df)
print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: {rows_before}")

#‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á
#drivable_km_before ‡∏Ñ‡∏ß‡∏£‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ drivable_km_after (‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡∏µ‡πà‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß)
#total_km_before ‡∏Ñ‡∏ß‡∏£‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ total_km_after (‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏£‡∏ñ‡πÑ‡∏î‡πâ‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á)
condition_drivable = df['drivable_km_before'] > df['drivable_km_after']
condition_total_km = df['total_km_before'] < df['total_km_after']
combined_condition = (condition_drivable) & (condition_total_km)
df_cleaned_strict = df[combined_condition].copy()

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
rows_after = len(df_cleaned_strict)
print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á: {rows_after}")
print(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å: {rows_before - rows_after}")

#‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
print("\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç:")
print(df_cleaned_strict.head())

#‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏î‡∏¥‡∏°
df = df_cleaned_strict

#‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á
df.head()

#‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing Value ‡πÉ‡∏ô Features ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Target
df = df.dropna(subset=["date_before", "timestamp_before", "date_after", "timestamp_after"])

# ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô datetime ‡πÅ‡∏•‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö timezone
# ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
df["start_time"] = pd.to_datetime(df["date_before"] + " " + df["timestamp_before"], errors='coerce', utc=True)
df["end_time"] = pd.to_datetime(df["date_after"] + " " + df["timestamp_after"], errors='coerce', utc=True)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Feature actual_drive_time (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡∏ô‡∏≤‡∏ó‡∏µ) ‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
df["actual_drive_time"] = (df["end_time"] - df["start_time"]).dt.total_seconds() / 60
df = df[df["actual_drive_time"] >= 0]

#‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Prediction
df.drop(columns=[
    'battery_percent_after', 'drivable_km_after',
    'total_km_after', 'temperature_after',
    'date_before', 'date_after', 'timestamp_after', 'timestamp_before','start_time','end_time'
], inplace=True)

#‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df.head()

# ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ò‡πå‡∏Ç‡∏≠‡∏á Features ‡∏Å‡∏±‡∏ö Target ‡∏î‡πâ‡∏ß‡∏¢ Correlation Matrix
numeric_df = df.select_dtypes(include=['number'])
corr_matrix = numeric_df.corr()
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Feature Correlation")
plt.show()

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü Bar Chart ‡∏Ç‡∏≠‡∏á Top Features ‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö Target
# ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
def plot_top_features_correlation(corr_target, top_features, target):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Bar Chart ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤ Correlation ‡∏Ç‡∏≠‡∏á Top Features ‡∏Å‡∏±‡∏ö Target Variable"""
    plt.figure(figsize=(10, 6))
    corr_values = corr_target[top_features]
    plt.bar(top_features, corr_values)
    plt.xlabel("Features")
    plt.ylabel("Absolute Correlation with Target")
    plt.title(f"Top Features Correlation with {target}")
    plt.xticks(rotation=45, ha="right")
    plt.tight_layout()
    plt.show()

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å (Main Program)
if __name__ == "__main__":
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ Correlation ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö Target
    target ='actual_drive_time'
    corr_target = corr_matrix[target].drop(target).abs()
    top_features = corr_target.nlargest(n).index.tolist() #‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Features ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πâ‡∏Ñ‡πà‡∏≤ n 
    print("üîπ Features ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:", top_features)

    # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü Bar Chart
    plot_top_features_correlation(corr_target, top_features, target)

    # ‡πÅ‡∏™‡∏î‡∏á Heatmap ‡∏Ç‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å + target
    plt.figure(figsize=(8, 6))
    sns.heatmap(numeric_df[top_features + [target]].corr(), annot=True, cmap="coolwarm", fmt=".2f")
    plt.title("Top n Feature Correlation with Target")
    plt.show()

# ‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Top Features ‡πÅ‡∏•‡∏∞ Target ‡πÑ‡∏õ Train
# ‡πÅ‡∏¢‡∏Å feature ‡πÅ‡∏•‡∏∞ target
X_train = df[top_features]
y_train = df['actual_drive_time']


# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•
models = {
    "Linear Regression": LinearRegression(),
    "Random Forest": RandomForestRegressor(n_estimators=100, random_state=42),
    "XGBoost": XGBRegressor(n_estimators=100, random_state=42),
}

# ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô Model ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Leave-One-Out Cross Validation
# ‡∏™‡∏£‡πâ‡∏≤‡∏á Leave-One-Out Cross Validation
loo = LeaveOneOut()
cv_results = {name: {"y_true": [], "y_pred": [], "errors": []} for name in models}

# ‡∏ß‡∏ô‡∏•‡∏π‡∏õ LOO-CV
for train_index, test_index in loo.split(X_train):
    X_train_fold, X_test_fold = X_train.iloc[train_index], X_train.iloc[test_index]
    y_train_fold, y_test_fold = y_train.iloc[train_index], y_train.iloc[test_index]

    for name, model in models.items():
        model.fit(X_train_fold, y_train_fold)  # ‡πÄ‡∏ó‡∏£‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        y_pred = model.predict(X_test_fold)[0]  # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏£‡∏¥‡∏á, ‡∏Ñ‡πà‡∏≤‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå ‡πÅ‡∏•‡∏∞ Error
        y_true_value = y_test_fold.values[0]
        error = y_true_value - y_pred

        cv_results[name]["y_true"].append(y_true_value)
        cv_results[name]["y_pred"].append(y_pred)
        cv_results[name]["errors"].append(error)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì RMSE, MAE, R¬≤ ‡πÅ‡∏•‡∏∞ Std ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ Error
for name, scores in cv_results.items():
    y_true = np.array(scores["y_true"])
    y_pred = np.array(scores["y_pred"])
    errors = np.array(scores["errors"])  # Error ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ fold

    rmse = np.sqrt(np.mean(errors**2))  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ RMSE
    mae = np.mean(np.abs(errors))  # ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ MAE
    r2 = r2_score(y_true, y_pred)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ R¬≤

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Standard Deviation (SD)

    error_std = np.std(errors)  # SD ‡∏Ç‡∏≠‡∏á Error

    print(f"{name}:")
    print(f"  RMSE: {rmse:.4f} ")
    print(f"  MAE: {mae:.4f}")
    print(f"  R¬≤ Score: {r2:.4f}")
    print(f"  Error SD: {error_std:.4f}\n")




